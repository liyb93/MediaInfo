#!/bin/bash

compile() {
    mkdir -p "$1"
    cd "$1"
    if [ -f config.status ]; then
        echo "Skipping configure"
    else
        CFLAGS="$2"
        if [ "${CONFIGURATION}" == "Debug" ]; then
            CFLAGS="$CFLAGS -g"
        else
            CFLAGS="$CFLAGS -DNDEBUG"
        fi
        echo "-> Do configure ($1/config.status)"
        CFLAGS="$CFLAGS" LDFLAGS="$3" ${SRCROOT}/libwebp/configure --prefix=$1 --enable-shared=no ${FLAGS} --host=$4
        
        retVal=$?
        if [ $retVal -ne 0 ]; then
            exit $retVal
        fi
    fi
    
    make -q ${ACTION}
    retVal=$?
    if [ $retVal -eq 0 ]; then
        echo "-> No need to compile."
        exit 0 # no need to make
    else
        echo "-> Need to compile ($retVal)."
    fi
    
    make -j`sysctl -n hw.physicalcpu` ${ACTION}
    retVal=$?
    if [ $retVal -ne 0 ]; then
        exit $retVal
    fi
    
    make install
    retVal=$?
    if [ $retVal -ne 0 ]; then
        exit $retVal
    fi
}

if [[ "${ONLY_ACTIVE_ARCH}" == "" ]]; then
    ONLY_ACTIVE_ARCH="NO"
fi

if [[ "$NATIVE_ARCH" == "" ]]; then
    NATIVE_ARCH=`uname -m`
fi

if [[ "$CONFIGURATION" == "" ]]; then
    CONFIGURATION="Release"
fi

if [[ "${TARGET_BUILD_DIR: -1}" == "/" ]]; then
	OUTDIR="${TARGET_BUILD_DIR}${TARGET_NAME}"
else
	OUTDIR="${TARGET_BUILD_DIR}/${TARGET_NAME}"
fi

if [ "${ACTION}" == "clean" ]; then
    if [[ "$ONLY_ACTIVE_ARCH" == "NO" ]]; then
        echo Remove "${OUTDIR}/${CONFIGURATION}/x86_64"
        if [ -n "${OUTDIR}/${CONFIGURATION}/x86_64" ]; then
            rm -rf "${OUTDIR}/${CONFIGURATION}/x86_64"
        fi
        echo Remove "${OUTDIR}/${CONFIGURATION}/arm64"
        if [ -n "${OUTDIR}/${CONFIGURATION}/arm64" ]; then
            rm -rf "${OUTDIR}/${CONFIGURATION}/arm64"
        fi
    else
        echo Remove "${OUTDIR}"
        if [ -n "${OUTDIR}" ]; then
            rm -rf "${OUTDIR}"
        fi
    fi
else
	if [ ! -f "${SRCROOT}/libwebp/configure.ac" ]; then
		echo "-> Updating submodules..."
		cd "${SRCROOT}"
		git submodule update --init
        retVal=$?
        if [ $retVal -ne 0 ]; then
            exit $retVal
        fi
	fi
	if [ ! -x "${SRCROOT}/libwebp/configure" ]; then
		echo "-> Autogen ${SRCROOT}/libwebp"
		cd "${SRCROOT}/libwebp"
		./autogen.sh
        retVal=$?
        if [ $retVal -ne 0 ]; then
            exit $retVal
        fi
	fi
	echo "-> Build for ${ACTION} in ${OUTDIR}"

    libraries=( libwebp libwebpdemux )
    
	mkdir -p "${OUTDIR}"
    
    if [[ "$ONLY_ACTIVE_ARCH" == "YES" ]]; then
        if [[ "$NATIVE_ARCH" == "x86_64" ]]; then
            compile "${OUTDIR}/${CONFIGURATION}/x86_64" "-mmacosx-version-min=10.14 -DNDEBUG" "" ""
    
            basename="${OUTDIR}/${CONFIGURATION}/x86_64/lib/"
        else
            compile "${OUTDIR}/${CONFIGURATION}/arm64" "-target arm64-apple-macos11 -DNDEBUG" "-target arm64-apple-macos11" "arm"
            basename="${OUTDIR}/${CONFIGURATION}/arm64/lib/"
        fi
        
        for lib in "${libraries[@]}"
        do
            ln -f "${basename}${lib}.a" "${OUTDIR}/${lib}.a"
            retVal=$?
            if [ $retVal -ne 0 ]; then
                exit $retVal
            fi
        done
    else
        compile "${OUTDIR}/${CONFIGURATION}/x86_64" "-mmacosx-version-min=10.14 -DNDEBUG" "" ""
        
        compile "${OUTDIR}/${CONFIGURATION}/arm64" "-target arm64-apple-macos11 -DNDEBUG" "-target arm64-apple-macos11" "arm"
        
        for lib in "${libraries[@]}"
        do
            lipo -create -output "${OUTDIR}/${lib}.a"  "${OUTDIR}/${CONFIGURATION}/x86_64/lib/${lib}.a" "${OUTDIR}/${CONFIGURATION}/arm64/lib/${lib}.a"
            retVal=$?
            if [ $retVal -ne 0 ]; then
                exit $retVal
            fi
        done
    fi
fi
